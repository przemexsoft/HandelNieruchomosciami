// <auto-generated />
using HandelNieruchomosciami.Controllers.Models.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace HandelNieruchomosciami.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HandelNieruchomosciami.Controllers.Models.Agent", b =>
                {
                    b.Property<int>("AgentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AgentDataWaznosciLicencji");

                    b.Property<string>("AgentEmail");

                    b.Property<string>("AgentImie");

                    b.Property<string>("AgentKodPocztowy");

                    b.Property<string>("AgentMiasto");

                    b.Property<int>("AgentNIP");

                    b.Property<string>("AgentNazwisko");

                    b.Property<string>("AgentNrLicencji");

                    b.Property<int>("AgentPESEL");

                    b.Property<int>("AgentTelefon");

                    b.Property<string>("AgentUlica");

                    b.Property<DateTime>("AgentZatrudnienieOd");

                    b.HasKey("AgentId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("HandelNieruchomosciami.Controllers.Models.Kontrahent", b =>
                {
                    b.Property<int>("KontrahentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("KontrahentAdresKorespondencyjny");

                    b.Property<string>("KontrahentEmail");

                    b.Property<string>("KontrahentImie");

                    b.Property<int>("KontrahentNIP");

                    b.Property<string>("KontrahentNazwisko");

                    b.Property<int>("KontrahentPESEL");

                    b.Property<int>("KontrahentTelefon");

                    b.HasKey("KontrahentId");

                    b.ToTable("Kontrahents");
                });

            modelBuilder.Entity("HandelNieruchomosciami.Controllers.Models.Nieruchomosc", b =>
                {
                    b.Property<int>("NieruchomoscId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("NieruchomoscCzynsz");

                    b.Property<string>("NieruchomoscKodPocztowy");

                    b.Property<string>("NieruchomoscMiasto");

                    b.Property<string>("NieruchomoscNrBudynku");

                    b.Property<int>("NieruchomoscPowierzchnia");

                    b.Property<int>("NieruchomoscTypZabudowy");

                    b.Property<string>("NieruchomoscUlica");

                    b.Property<int>("NieruchomoscWlasciciel");

                    b.HasKey("NieruchomoscId");

                    b.HasIndex("NieruchomoscTypZabudowy");

                    b.ToTable("Nieruchomoscs");
                });

            modelBuilder.Entity("HandelNieruchomosciami.Controllers.Models.StatusTransakcji", b =>
                {
                    b.Property<int>("StatusTransakcjiId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("StatusTransakcjiNazwa");

                    b.HasKey("StatusTransakcjiId");

                    b.ToTable("StatusTransakcjis");
                });

            modelBuilder.Entity("HandelNieruchomosciami.Controllers.Models.Transakcja", b =>
                {
                    b.Property<int>("TransakcjaId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("TransakcjaAgentId");

                    b.Property<DateTime>("TransakcjaDataUtworzenia");

                    b.Property<int>("TransakcjaKontrahentId");

                    b.Property<int>("TransakcjaNieruchomoscId");

                    b.Property<string>("TransakcjaNumer");

                    b.Property<int>("TransakcjaSprzedawcaId");

                    b.Property<int>("TransakcjaStatusTransakcjiId");

                    b.Property<int>("TransakcjaUmowaId");

                    b.HasKey("TransakcjaId");

                    b.HasIndex("TransakcjaAgentId");

                    b.HasIndex("TransakcjaKontrahentId");

                    b.HasIndex("TransakcjaNieruchomoscId");

                    b.HasIndex("TransakcjaStatusTransakcjiId");

                    b.HasIndex("TransakcjaUmowaId");

                    b.HasIndex("TransakcjaSprzedawcaIdWlascicielId");

                    b.ToTable("Transakcjas");
                });

            modelBuilder.Entity("HandelNieruchomosciami.Controllers.Models.TypZabudowy", b =>
                {
                    b.Property<int>("TypZabudowyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TypZabudowyNazwa");

                    b.HasKey("TypZabudowyId");

                    b.ToTable("TypZabudowies");
                });

            modelBuilder.Entity("HandelNieruchomosciami.Controllers.Models.Umowa", b =>
                {
                    b.Property<int>("UmowaId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("UmowaDataSporzadzeniaUmowy");

                    b.Property<int>("UmowaKontrahentId");

                    b.Property<int>("UmowaKwotaPLN");

                    b.Property<int>("UmowaNieruchomoscId");

                    b.Property<int>("UmowaSprzedajacyId");

                    b.Property<int?>("WlascicielId");

                    b.HasKey("UmowaId");

                    b.HasIndex("UmowaKontrahentId");

                    b.HasIndex("UmowaNieruchomoscId");

                    b.HasIndex("UmowaSprzedajacyId");

                    b.ToTable("Umowas");
                });

            modelBuilder.Entity("HandelNieruchomosciami.Controllers.Models.Wlasciciel", b =>
                {
                    b.Property<int>("WlascicielId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("WlascicielAdres");

                    b.Property<string>("WlascicielEmail");

                    b.Property<string>("WlascicielImie");

                    b.Property<string>("WlascicielNazwisko");

                    b.Property<int>("WlascicielTelefon");

                    b.HasKey("WlascicielId");

                    b.ToTable("Wlasciciels");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HandelNieruchomosciami.Controllers.Models.Nieruchomosc", b =>
                {
                    b.HasOne("HandelNieruchomosciami.Controllers.Models.TypZabudowy", "TypZabudowy")
                        .WithMany()
                        .HasForeignKey("TypZabudowyId");
                });

            modelBuilder.Entity("HandelNieruchomosciami.Controllers.Models.Transakcja", b =>
                {
                    b.HasOne("HandelNieruchomosciami.Controllers.Models.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentId");

                    b.HasOne("HandelNieruchomosciami.Controllers.Models.Kontrahent", "Kontrahent")
                        .WithMany()
                        .HasForeignKey("KontrahentId");

                    b.HasOne("HandelNieruchomosciami.Controllers.Models.Nieruchomosc", "Nieruchomosc")
                        .WithMany()
                        .HasForeignKey("NieruchomoscId");

                    b.HasOne("HandelNieruchomosciami.Controllers.Models.StatusTransakcji", "StatusTransakcji")
                        .WithMany()
                        .HasForeignKey("StatusTransakcjiId");

                    b.HasOne("HandelNieruchomosciami.Controllers.Models.Umowa", "Umowa")
                        .WithMany()
                        .HasForeignKey("UmowaId");

                    b.HasOne("HandelNieruchomosciami.Controllers.Models.Wlasciciel", "Wlasciciel")
                        .WithMany()
                        .HasForeignKey("WlascicielId");
                });

            modelBuilder.Entity("HandelNieruchomosciami.Controllers.Models.Umowa", b =>
                {
                    b.HasOne("HandelNieruchomosciami.Controllers.Models.Kontrahent", "Kontrahent")
                        .WithMany()
                        .HasForeignKey("KontrahentId");

                    b.HasOne("HandelNieruchomosciami.Controllers.Models.Nieruchomosc", "Nieruchomosc")
                        .WithMany()
                        .HasForeignKey("NieruchomoscId");

                    b.HasOne("HandelNieruchomosciami.Controllers.Models.Wlasciciel", "Wlasciciel")
                        .WithMany()
                        .HasForeignKey("WlascicielId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
